services:
  postgres:
    image: postgres:15-alpine
    container_name: scraper_postgres
    environment:
      POSTGRES_DB: scraper
      POSTGRES_USER: scraper
      POSTGRES_PASSWORD: scraper
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scraper"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: scraper_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: scraper_flaresolverr
    ports:
      - "8191:8191"
    environment:
      LOG_LEVEL: info
      LOG_HTML: false
      CAPTCHA_SOLVER: none

  minio:
    image: minio/minio:latest
    container_name: scraper_minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio-init:
    image: minio/mc:latest
    container_name: scraper_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/scraper-artifacts || true;
      mc anonymous set download myminio/scraper-artifacts;
      exit 0;
      "

  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: ecommerce-scraper/api:latest
    environment:
      DATABASE_URL: postgresql://scraper:scraper@postgres:5432/scraper
      REDIS_URL: redis://redis:6379/0
      FLARESOLVERR_URL: http://flaresolverr:8191
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: scraper-artifacts
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      CORS_ORIGINS: '["http://localhost:3000", "http://dashboard:3000"]'
      PYTHON_BIN: python
    ports:
      - "8000:8000"
    command: ["uvicorn", "services.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - exports_data:/app/data
      - reports_data:/app/reports

  worker:
    image: ecommerce-scraper/api:latest
    environment:
      DATABASE_URL: postgresql://scraper:scraper@postgres:5432/scraper
      REDIS_URL: redis://redis:6379/0
      FLARESOLVERR_URL: http://flaresolverr:8191
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: scraper-artifacts
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      PYTHON_BIN: python
    command: ["python", "services/worker/worker.py"]
    volumes:
      - exports_data:/app/data
      - reports_data:/app/reports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
      args:
        APP_VERSION: ${APP_VERSION:-0.1.0}
        GIT_SHA: ${GIT_SHA:-dev}
    image: ecommerce-scraper/dashboard:latest
    environment:
      PORT: 3000
      NEXT_PUBLIC_API_BASE_URL: http://api:8000
      NODE_ENV: production
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-0.1.0}
      NEXT_PUBLIC_GIT_SHA: ${GIT_SHA:-dev}
      SUMMARY_MAX_STOCK_THRESHOLD: ${SUMMARY_MAX_STOCK_THRESHOLD:-10000}
      PROXY_STATS_REQUESTS_PER_PROXY: ${PROXY_STATS_REQUESTS_PER_PROXY:-250}
      PROXY_STATS_COST_PER_PROXY: ${PROXY_STATS_COST_PER_PROXY:-0.65}
      PROXY_STATS_PREMIUM_BUDGET: ${PROXY_STATS_PREMIUM_BUDGET:-2200}
      PROXY_STATS_PREMIUM_COST_USED: ${PROXY_STATS_PREMIUM_COST_USED:-650}
      PROXY_STATS_PREMIUM_ACTIVE_SESSIONS: ${PROXY_STATS_PREMIUM_ACTIVE_SESSIONS:-0}
      PROXY_STATS_PURCHASE_COOLDOWN_MINUTES: ${PROXY_STATS_PURCHASE_COOLDOWN_MINUTES:-0}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started
    volumes:
      - exports_data:/app/data
      - reports_data:/app/reports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  minio_data:
  exports_data:
  reports_data:
