version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scraper_postgres
    environment:
      POSTGRES_DB: scraper
      POSTGRES_USER: scraper
      POSTGRES_PASSWORD: scraper
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scraper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Queue
  redis:
    image: redis:7-alpine
    container_name: scraper_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FlareSolverr (Cloudflare bypass)
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: scraper_flaresolverr
    ports:
      - "8191:8191"
    environment:
      LOG_LEVEL: info
      LOG_HTML: false
      CAPTCHA_SOLVER: none

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: scraper_minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: scraper_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/scraper-artifacts || true;
      mc anonymous set download myminio/scraper-artifacts;
      exit 0;
      "

  # FastAPI Backend
  api:
    build:
      context: ../..
      dockerfile: network/NEW_PROJECT/Dockerfile.backend
    container_name: scraper_api
    environment:
      DATABASE_URL: postgresql://scraper:scraper@postgres:5432/scraper
      REDIS_URL: redis://redis:6379/0
      FLARESOLVERR_URL: http://flaresolverr:8191
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: scraper-artifacts
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      CORS_ORIGINS: '["http://localhost:3000"]'
    ports:
      - "8000:8000"
    command: ["uvicorn", "services.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../core:/app/core
      - ../../utils:/app/utils
      - ../../parsers:/app/parsers
      - ./database:/app/database
      - ./services:/app/services
      - ./data:/app/data

  # RQ Worker (2 replicas)
  worker:
    build:
      context: ../..
      dockerfile: network/NEW_PROJECT/Dockerfile.backend
    environment:
      DATABASE_URL: postgresql://scraper:scraper@postgres:5432/scraper
      REDIS_URL: redis://redis:6379/0
      FLARESOLVERR_URL: http://flaresolverr:8191
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: scraper-artifacts
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
    command: ["python", "services/worker/worker.py"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../core:/app/core
      - ../../utils:/app/utils
      - ../../parsers:/app/parsers
      - ./database:/app/database
      - ./services:/app/services
      - ./data:/app/data
    deploy:
      replicas: 2

volumes:
  postgres_data:
  redis_data:
  minio_data: