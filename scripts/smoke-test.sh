#!/bin/bash
# =============================================================================
# Smoke Test Script for Webscraper
# =============================================================================
# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
# =============================================================================

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Emojis
CHECK="‚úÖ"
CROSS="‚ùå"
HOURGLASS="‚è≥"
INFO="‚ÑπÔ∏è"

# Test counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# =============================================================================
# Helper Functions
# =============================================================================

print_header() {
    echo ""
    echo -e "${BLUE}==============================================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}==============================================================================${NC}"
    echo ""
}

print_test() {
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -e "${BLUE}[TEST $TOTAL_TESTS] $1${NC}"
}

print_success() {
    PASSED_TESTS=$((PASSED_TESTS + 1))
    echo -e "${GREEN}  ${CHECK} PASS: $1${NC}"
}

print_failure() {
    FAILED_TESTS=$((FAILED_TESTS + 1))
    echo -e "${RED}  ${CROSS} FAIL: $1${NC}"
}

print_info() {
    echo -e "${BLUE}  ${INFO} $1${NC}"
}

test_endpoint() {
    local url=$1
    local expected_pattern=$2
    local description=$3
    
    print_test "$description"
    
    response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null || echo "000")
    
    if [ "$response" = "200" ]; then
        if [ -n "$expected_pattern" ]; then
            content=$(curl -s "$url" 2>/dev/null || echo "")
            if echo "$content" | grep -q "$expected_pattern"; then
                print_success "Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                return 0
            else
                print_failure "Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º"
                print_info "URL: $url"
                return 1
            fi
        else
            print_success "Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 200)"
            return 0
        fi
    else
        print_failure "Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response)"
        print_info "URL: $url"
        return 1
    fi
}

# =============================================================================
# Smoke Tests
# =============================================================================

print_header "üß™ Webscraper Smoke Tests"

# -----------------------------------------------------------------------------
# Test 1: Docker Services Status
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"

if docker compose ps | grep -q "Up"; then
    print_success "Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
else
    print_failure "Docker —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: make up"
    exit 1
fi

# -----------------------------------------------------------------------------
# Test 2: PostgreSQL Connectivity
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"

if docker compose exec -T postgres pg_isready -U scraper 2>/dev/null | grep -q "accepting"; then
    print_success "PostgreSQL –æ—Ç–≤–µ—á–∞–µ—Ç"
else
    print_failure "PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# -----------------------------------------------------------------------------
# Test 3: Redis Connectivity
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"

if docker compose exec -T redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
    print_success "Redis –æ—Ç–≤–µ—á–∞–µ—Ç"
else
    print_failure "Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# -----------------------------------------------------------------------------
# Test 4: API Health Endpoint
# -----------------------------------------------------------------------------
test_endpoint "http://localhost:8000/api/health" "healthy" "API Health Endpoint"

# -----------------------------------------------------------------------------
# Test 5: API Root Endpoint
# -----------------------------------------------------------------------------
test_endpoint "http://localhost:8000/" "ok" "API Root Endpoint"

# -----------------------------------------------------------------------------
# Test 6: API Documentation
# -----------------------------------------------------------------------------
test_endpoint "http://localhost:8000/api/docs" "swagger" "API Documentation (Swagger UI)"

# -----------------------------------------------------------------------------
# Test 7: Dashboard Health Endpoint
# -----------------------------------------------------------------------------
test_endpoint "http://localhost:3050/api/health" "" "Dashboard Health Endpoint"

# -----------------------------------------------------------------------------
# Test 8: Database Migrations
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"

migration_count=$(docker compose exec -T postgres psql -U scraper -d scraper -t -c "SELECT COUNT(*) FROM schema_migrations;" 2>/dev/null | tr -d ' ' || echo "0")

if [ "$migration_count" -gt 0 ]; then
    print_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ($migration_count —à—Ç.)"
else
    print_failure "–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: make migrate"
fi

# -----------------------------------------------------------------------------
# Test 9: Database Tables
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

tables=$(docker compose exec -T postgres psql -U scraper -d scraper -t -c "\dt" 2>/dev/null | grep -c "jobs\|pages\|snapshots\|exports\|metrics" || echo "0")

if [ "$tables" -ge 5 ]; then
    print_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã"
else
    print_failure "–ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (–Ω–∞–π–¥–µ–Ω–æ: $tables, –æ–∂–∏–¥–∞–µ—Ç—Å—è: 5+)"
fi

# -----------------------------------------------------------------------------
# Test 10: Worker Processes
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ Worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"

worker_count=$(docker compose ps worker 2>/dev/null | grep -c "Up" || echo "0")

if [ "$worker_count" -gt 0 ]; then
    print_success "Worker –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã ($worker_count —à—Ç.)"
else
    print_failure "Worker –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
fi

# -----------------------------------------------------------------------------
# Test 11: Create Test Job (Integration Test)
# -----------------------------------------------------------------------------
print_test "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Job (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç)"

# Get admin token from .env
if [ -f .env ]; then
    ADMIN_TOKEN=$(grep ADMIN_TOKEN .env | cut -d '=' -f2 | tr -d ' "' || echo "dev-admin-token")
else
    ADMIN_TOKEN="dev-admin-token"
fi

# Create test job
job_response=$(curl -s -X POST http://localhost:8000/api/jobs \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $ADMIN_TOKEN" \
    -d '{
        "domain": "smoke-test.local",
        "urls": ["https://example.com/test"],
        "options": {"test_mode": true}
    }' 2>/dev/null || echo "")

if echo "$job_response" | grep -q "job_id"; then
    job_id=$(echo "$job_response" | grep -o '"job_id":"[^"]*"' | cut -d'"' -f4)
    print_success "–¢–µ—Å—Ç–æ–≤—ã–π Job —Å–æ–∑–¥–∞–Ω (ID: $job_id)"
    
    # Wait a bit and check status
    sleep 2
    
    job_status=$(curl -s "http://localhost:8000/api/jobs/$job_id" 2>/dev/null || echo "")
    
    if echo "$job_status" | grep -q "queued\|running"; then
        print_success "Job –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    else
        print_info "Job status: $(echo $job_status | grep -o '"status":"[^"]*"' | cut -d'"' -f4)"
    fi
else
    print_failure "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π Job"
    print_info "Response: $job_response"
fi

# -----------------------------------------------------------------------------
# Test 12: RQ Queue Status
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ RQ –æ—á–µ—Ä–µ–¥–µ–π –≤ Redis"

queue_info=$(docker compose exec -T redis redis-cli KEYS "rq:*" 2>/dev/null | wc -l || echo "0")

if [ "$queue_info" -gt 0 ]; then
    print_success "RQ –æ—á–µ—Ä–µ–¥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
else
    print_info "RQ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö jobs)"
fi

# -----------------------------------------------------------------------------
# Test 13: Log Files
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"

if [ -d "logs" ]; then
    log_count=$(find logs -type f -name "*.log" 2>/dev/null | wc -l || echo "0")
    if [ "$log_count" -gt 0 ]; then
        print_success "–§–∞–π–ª—ã –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞—é—Ç—Å—è"
    else
        print_info "–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
    fi
else
    print_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
fi

# -----------------------------------------------------------------------------
# Test 14: Data Directory
# -----------------------------------------------------------------------------
print_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

if [ -d "data" ]; then
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    print_failure "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# -----------------------------------------------------------------------------
# Final Summary
# -----------------------------------------------------------------------------
echo ""
print_header "üìä Test Results Summary"

echo "Total Tests:  $TOTAL_TESTS"
echo -e "${GREEN}Passed:       $PASSED_TESTS${NC}"
echo -e "${RED}Failed:       $FAILED_TESTS${NC}"

if [ $FAILED_TESTS -eq 0 ]; then
    echo ""
    echo -e "${GREEN}${CHECK} –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo ""
    echo "‚ú® –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    echo ""
    echo "üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:"
    echo "  ‚Ä¢ API:       http://localhost:8000/api/docs"
    echo "  ‚Ä¢ Dashboard: http://localhost:3050"
    echo ""
    exit 0
else
    echo ""
    echo -e "${RED}${CROSS} –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å${NC}"
    echo ""
    echo "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
    echo "  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: make logs"
    echo "  2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: make restart"
    echo "  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å .env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo "  4. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: make migrate"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: cat GETTING_STARTED.md"
    echo ""
    exit 1
fi