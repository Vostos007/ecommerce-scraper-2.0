#!/usr/bin/env bash
# ensure_flaresolverr.sh ‚Äì helper that guarantees FlareSolverr is running locally.
# Usage: source scripts/ensure_flaresolverr.sh && ensure_flaresolverr

set -euo pipefail

COMPOSE_FILE=${FLARESOLVERR_COMPOSE_FILE:-docker-compose.flaresolverr.yml}
FLARESOLVERR_URL=${FLARESOLVERR_URL:-http://localhost:8192}
FLARESOLVERR_HEALTH_ENDPOINT="${FLARESOLVERR_URL%/}/health"
FLARESOLVERR_WAIT_SECONDS=${FLARESOLVERR_WAIT_SECONDS:-30}

ensure_flaresolverr() {
    local deadline message

    if ! docker info >/dev/null 2>&1; then
        echo "[flaresolverr] ‚ùå Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" >&2
        return 1
    fi

    if ! docker ps --format '{{.Names}}' | grep -q '^flaresolverr'; then
        echo "[flaresolverr] üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
        docker-compose -f "$COMPOSE_FILE" up -d
    fi

    echo "[flaresolverr] ‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API (${FLARESOLVERR_HEALTH_ENDPOINT})..."
    deadline=$((SECONDS + FLARESOLVERR_WAIT_SECONDS))
    while (( SECONDS < deadline )); do
        if curl -sf "$FLARESOLVERR_HEALTH_ENDPOINT" | grep -q '"status"\s*:\s*"ok"'; then
            echo "[flaresolverr] ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            return 0
        fi
        sleep 1
    done

    message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å status=ok –æ—Ç FlareSolverr –∑–∞ ${FLARESOLVERR_WAIT_SECONDS}—Å"
    echo "[flaresolverr] ‚ùå $message" >&2
    return 1
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    if ensure_flaresolverr; then
        exit 0
    fi
    exit 1
fi
