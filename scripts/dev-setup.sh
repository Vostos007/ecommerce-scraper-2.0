#!/bin/bash
# =============================================================================
# Dev Environment Setup Script for Webscraper
# =============================================================================
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É development –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================================================================

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Emojis
CHECK="‚úÖ"
CROSS="‚ùå"
ROCKET="üöÄ"
WRENCH="üîß"
INFO="‚ÑπÔ∏è"

# =============================================================================
# Helper Functions
# =============================================================================

print_header() {
    echo ""
    echo -e "${BLUE}==============================================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}==============================================================================${NC}"
    echo ""
}

print_step() {
    echo -e "${GREEN}${WRENCH} $1${NC}"
}

print_success() {
    echo -e "${GREEN}${CHECK} $1${NC}"
}

print_error() {
    echo -e "${RED}${CROSS} $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}${INFO} $1${NC}"
}

check_command() {
    if command -v $1 &> /dev/null; then
        print_success "$1 –Ω–∞–π–¥–µ–Ω: $(command -v $1)"
        return 0
    else
        print_error "$1 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# =============================================================================
# Main Script
# =============================================================================

print_header "${ROCKET} Webscraper Development Setup"

# -----------------------------------------------------------------------------
# Step 1: Check Prerequisites
# -----------------------------------------------------------------------------
print_step "–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ prerequisites..."

MISSING_DEPS=0

# Check Docker
if check_command docker; then
    docker --version
else
    MISSING_DEPS=1
fi

# Check Docker Compose
if check_command "docker compose" || check_command "docker-compose"; then
    if command -v "docker compose" &> /dev/null; then
        docker compose version
    else
        docker-compose --version
    fi
else
    MISSING_DEPS=1
fi

# Check Python (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤)
if check_command python3; then
    PY_VERSION=$(python3 -c 'import sys; print("%s.%s.%s" % sys.version_info[:3])')
    echo "python3 ${PY_VERSION}"
    PY_MAJOR=$(python3 -c 'import sys; print(sys.version_info.major)')
    PY_MINOR=$(python3 -c 'import sys; print(sys.version_info.minor)')
    if [ "$PY_MAJOR" -lt 3 ] || { [ "$PY_MAJOR" -eq 3 ] && [ "$PY_MINOR" -lt 11 ]; }; then
        print_error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11+, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${PY_VERSION}"
        MISSING_DEPS=1
    fi
else
    print_warning "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.11+"
    MISSING_DEPS=1
fi

# Check Node.js (optional for dashboard dev)
if check_command node; then
    node --version
else
    print_warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è Docker-based –∑–∞–ø—É—Å–∫–∞)"
fi

if [ $MISSING_DEPS -eq 1 ]; then
    echo ""
    print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose: https://docs.docker.com/get-docker/"
    exit 1
fi

print_success "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo ""

# -----------------------------------------------------------------------------
# Step 2: Setup .env file
# -----------------------------------------------------------------------------
print_step "–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞..."

if [ -f .env ]; then
    print_warning ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cp .env.example .env
        print_success ".env —Ñ–∞–π–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –∏–∑ .env.example"
    else
        print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª"
    fi
else
    if [ -f .env.example ]; then
        cp .env.example .env
        print_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example"
    else
        print_error ".env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
fi

echo ""

# -----------------------------------------------------------------------------
# Step 3: Create necessary directories
# -----------------------------------------------------------------------------
print_step "–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."

mkdir -p data/jobs
mkdir -p data/exports
mkdir -p logs
mkdir -p backups

print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
echo ""

# -----------------------------------------------------------------------------
# Step 4: Pull/Build Docker images
# -----------------------------------------------------------------------------
print_step "–®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."

print_info "–°–∫–∞—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã (PostgreSQL, Redis)..."
docker compose pull postgres redis 2>&1 | grep -v "Pulling" || true

print_info "–°–æ–±–∏—Ä–∞–µ–º custom –æ–±—Ä–∞–∑—ã (API, Worker, Dashboard)..."
docker compose build --no-cache 2>&1 | tail -n 5

print_success "Docker –æ–±—Ä–∞–∑—ã –≥–æ—Ç–æ–≤—ã"
echo ""

# -----------------------------------------------------------------------------
# Step 5: Start services
# -----------------------------------------------------------------------------
print_step "–®–∞–≥ 5: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."

docker compose up -d

print_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
echo ""

# -----------------------------------------------------------------------------
# Step 6: Run migrations
# -----------------------------------------------------------------------------
print_step "–®–∞–≥ 6: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

# Wait for postgres to be fully ready
print_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
for i in {1..30}; do
    if docker compose exec -T postgres pg_isready -U scraper &> /dev/null; then
        print_success "PostgreSQL –≥–æ—Ç–æ–≤"
        break
    fi
    if [ $i -eq 30 ]; then
        print_error "PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫"
        exit 1
    fi
    sleep 1
done

print_info "–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
docker compose exec api python network/NEW_PROJECT/database/migrate.py

print_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
echo ""

# -----------------------------------------------------------------------------
# Step 7: Verify installation
# -----------------------------------------------------------------------------
print_step "–®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."

echo ""
print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º endpoints..."

# Check API
if curl -s http://localhost:8000/api/health | grep -q "healthy"; then
    print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç: http://localhost:8000"
else
    print_warning "API –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è)"
fi

# Check Dashboard
if curl -s http://localhost:3050/api/health | grep -q "ok"; then
    print_success "Dashboard —Ä–∞–±–æ—Ç–∞–µ—Ç: http://localhost:3050"
else
    print_warning "Dashboard –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è)"
fi

# Check Redis
if docker compose exec -T redis redis-cli ping | grep -q "PONG"; then
    print_success "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# Check Postgres
if docker compose exec -T postgres pg_isready -U scraper | grep -q "accepting"; then
    print_success "PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

echo ""

# -----------------------------------------------------------------------------
# Final Summary
# -----------------------------------------------------------------------------
print_header "${ROCKET} Setup Complete!"

echo -e "${GREEN}–í–∞—à–µ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"
echo ""
echo "üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:"
echo "  ‚Ä¢ API Documentation:  http://localhost:8000/api/docs"
echo "  ‚Ä¢ Dashboard UI:       http://localhost:3050"
echo "  ‚Ä¢ Grafana (optional): http://localhost:3001"
echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  ‚Ä¢ make logs        - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
echo "  ‚Ä¢ make status      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  ‚Ä¢ make smoke-test  - –ó–∞–ø—É—Å—Ç–∏—Ç—å smoke test"
echo "  ‚Ä¢ make help        - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
echo ""
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
echo "  ‚Ä¢ Quick Start: cat GETTING_STARTED.md"
echo "  ‚Ä¢ API Docs:    open http://localhost:8000/api/docs"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  –î–ª—è production deployment –∏–∑–º–µ–Ω–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ .env —Ñ–∞–π–ª–µ!${NC}"
echo ""
echo -e "${GREEN}${ROCKET} Happy coding!${NC}"
echo ""
