version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: scraper_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-scraper}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scraper}
      POSTGRES_DB: ${POSTGRES_DB:-scraper}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-scraper}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: scraper_redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: scraper_flaresolverr
    environment:
      LOG_LEVEL: info
      PORT: 8191
    ports:
      - "${FLARESOLVERR_PORT:-8192}:8191"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8191/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: scraper_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - miniodata:/data
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9000/minio/health/live || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  # one-time init to create bucket (idempotent)
  minio-init:
    image: minio/mc:latest
    container_name: scraper_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
      /usr/bin/mc config host add local http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin} --api S3v4 &&
      /usr/bin/mc mb -p local/${S3_BUCKET:-scraper-artifacts} || true &&
      /usr/bin/mc anonymous set public local/${S3_BUCKET:-scraper-artifacts} || true &&
      echo 'MinIO bucket ready';
      "
    restart: "no"

  api:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: scraper_api
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://scraper:scraper@postgres:5432/scraper}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      FLARESOLVERR_URL: ${FLARESOLVERR_URL:-http://flaresolverr:8191}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_BUCKET: ${S3_BUCKET:-scraper-artifacts}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-dev-admin-token}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      flaresolverr:
        condition: service_started
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    ports:
      - "${API_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: scraper_worker
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://scraper:scraper@postgres:5432/scraper}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      FLARESOLVERR_URL: ${FLARESOLVERR_URL:-http://flaresolverr:8191}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_BUCKET: ${S3_BUCKET:-scraper-artifacts}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-dev-admin-token}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "services/worker/worker.py"]
    restart: unless-stopped

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: scraper_dashboard
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8000}
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  # (Опционально) Автообновление контейнеров при выходе новых образов из registry
  # watchtower:
  #   image: containrrr/watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command: --interval 300
  #   restart: unless-stopped

volumes:
  pgdata:
  miniodata:
  redisdata:
